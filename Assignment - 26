import threading
import time
import random

# 1. Write a python script to multiple 2 or 3 or 4 numbers with a single multiply method in a class using method overloading.
class Multiplier:
    def multiply(self, *args):
        result = 1
        for num in args:
            result *= num
        return result

# 2. Write a python script to create a user account class with 2 instance variables (userid and balance). Create 3 user objects and add all the users using operator overloading.
class UserAccount:
    def __init__(self, userid, balance):
        self.userid = userid
        self.balance = balance
    
    def __add__(self, other):
        return self.balance + other.balance

# 3. Write a python script to create a to print the above user account object using operator overloading (hint __str__ method).
class UserAccount:
    def __init__(self, userid, balance):
        self.userid = userid
        self.balance = balance
    
    def __str__(self):
        return f"User ID: {self.userid}, Balance: {self.balance}"

# 4. Write a python script to create two Threads. First thread will print all Even numbers and Second thread will print all Odd numbers till 100.
class EvenThread(threading.Thread):
    def run(self):
        for i in range(2, 101, 2):
            print("Even:", i)

class OddThread(threading.Thread):
    def run(self):
        for i in range(1, 101, 2):
            print("Odd:", i)

# 5. Write a python script to create 2 threads to add all the values from 1 to 100.
class AdderThread(threading.Thread):
    def __init__(self):
        super().__init__()
        self.total = 0
    
    def run(self):
        for i in range(1, 101):
            self.total += i

# 6. Write a python script to create 5 threads to fill a list with random numbers till 100.
class RandomFillThread(threading.Thread):
    def __init__(self, num_list):
        super().__init__()
        self.num_list = num_list
    
    def run(self):
        for _ in range(100):
            self.num_list.append(random.randint(1, 100))

# 7. Write a python script to create a clock where 1st thread will print the current time every second and 2nd will print “1 Minute Completed” after every 1 minute.
class TimeThread(threading.Thread):
    def run(self):
        while True:
            print(time.strftime("%H:%M:%S", time.localtime()))
            time.sleep(1)

class MinuteThread(threading.Thread):
    def run(self):
        while True:
            time.sleep(60)
            print("1 Minute Completed")

# 8. Write a python script to change the name of the Thread.
class MyThread(threading.Thread):
    def __init__(self, name):
        super().__init__()
        self.name = name
    
    def run(self):
        print(f"Hello from {self.name}")

# 9. Write a python script to join 2 threads after printing completing the first Question.
thread1 = threading.Thread(target=Multiplier().multiply, args=(2, 3, 4))
thread2 = threading.Thread(target=MyThread("Thread 2").run)

thread1.start()
thread1.join()

thread2.start()
thread2.join()

# 10. Write a python script to check whether a given number is prime or armstrong number using 2 different threads.
class PrimeThread(threading.Thread):
    def __init__(self, number):
        super().__init__()
        self.number = number
    
    def run(self):
        for i in range(2, int(self.number**0.5) + 1):
            if self.number % i == 0:
                print(f"{self.number} is not a prime number")
                break
        else:
            print(f"{self.number} is a prime number")

class ArmstrongThread(threading.Thread):
    def __init__(self, number):
        super().__init__()
        self.number = number
    
    def run(self):
        order = len(str(self.number))
        temp = self.number
        total = 0
        while temp > 0:
            digit = temp % 10
            total += digit ** order
            temp //= 10
        if self.number == total:
            print(f"{self.number} is an Armstrong number")
        else:
            print(f"{self.number} is not an Armstrong number")

# Usage example:
prime_thread = PrimeThread(17)
armstrong_thread = ArmstrongThread(153)

prime_thread.start()
armstrong_thread.start()
