# 1. Use iter and next method to access all the elements of a given set using while loop
my_set = {1, 2, 3, 4, 5}
iterator = iter(my_set)
while True:
    try:
        element = next(iterator)
        print(element)
    except StopIteration:
        break

# 2. Create a generator to produce first n odd natural numbers
def generate_odd_numbers(n):
    count = 0
    current_number = 1
    while count < n:
        yield current_number
        current_number += 2
        count += 1

# 3. Create a generator to produce first n even natural numbers
def generate_even_numbers(n):
    count = 0
    current_number = 2
    while count < n:
        yield current_number
        current_number += 2
        count += 1

# 4. Create a generator to produce squares of first N natural numbers
def generate_squares(n):
    for i in range(1, n + 1):
        yield i ** 2

# 5. Create a generator to produce first n terms of Fibonacci series
def generate_fibonacci(n):
    a, b = 0, 1
    count = 0
    while count < n:
        yield a
        a, b = b, a + b
        count += 1

# 6. Create a generator to produce first n prime numbers
def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

def generate_primes(n):
    count = 0
    num = 2
    while count < n:
        if is_prime(num):
            yield num
            count += 1
        num += 1

# 7. Create an endless iterator using generator method to produce terms of Fibonacci series
def endless_fibonacci():
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b

# 8. Create an endless iterator using generator method to produce Prime numbers
def endless_primes():
    num = 2
    while True:
        if is_prime(num):
            yield num
        num += 1

# 9. Define a function to calculate perimeter of a triangle with validity check decorator
def triangle_perimeter(a, b, c):
    return a + b + c

def check_triangle_validity(func):
    def wrapper(a, b, c):
        if a + b > c and b + c > a and c + a > b:
            return func(a, b, c)
        else:
            return "Triangle with these side lengths cannot exist."
    return wrapper

@check_triangle_validity
def calculate_triangle_perimeter(a, b, c):
    return a + b + c

# 10. Define a function to calculate HCF of two numbers with coprime check decorator
def calculate_hcf(a, b):
    while b:
        a, b = b, a % b
    return a

def check_coprime(func):
    def wrapper(a, b):
        hcf = calculate_hcf(a, b)
        if hcf == 1:
            return func(a, b)
        else:
            return "The given numbers are not co-prime."
    return wrapper

@check_coprime
def calculate_hcf_coprime(a, b):
    while b:
        a, b = b, a % b
    return a
